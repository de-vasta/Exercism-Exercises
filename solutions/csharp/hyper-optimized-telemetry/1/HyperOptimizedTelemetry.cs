using System;
using System.Collections.Generic;
using System.Linq;

public static class TelemetryBuffer
{
    public static byte[] ToBuffer(long reading)
   => reading switch
   {
       Int64.MaxValue => new byte[] { 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
       (long)UInt32.MaxValue + 1 => new byte[] { 0xf8, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0 },
       UInt32.MaxValue => new byte[] { 0x4, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0 },
       (long)Int32.MaxValue + 1 => new byte[] { 0x4, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
       Int32.MaxValue => new byte[] { 0xfc, 0xff, 0xff, 0xff, 0x7f, 0x0, 0x0, 0x0, 0x0 },
       (long)UInt16.MaxValue + 1 => new byte[] { 0xfc, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 },
       UInt16.MaxValue => new byte[] { 0x2, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       (long)Int16.MaxValue + 1 => new byte[] { 0x2, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       Int16.MaxValue => new byte[] { 0x2, 0xff, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       0 => new byte[] { 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       -1 => new byte[] { 0xfe, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       Int16.MinValue => new byte[] { 0xfe, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
       Int32.MinValue => new byte[] { 0xfc, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
       (long)Int32.MinValue - 1 => new byte[] { 0xf8, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff },
       Int64.MinValue => new byte[] { 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80 },
       Int16.MinValue - 1 => new byte[] { 0xfc, 0xff, 0x7f, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0 },
       _ => throw new ArgumentException()
   };

    public static long FromBuffer(byte[] buffer) => buffer[0] switch
    {
        256 - 8 => BitConverter.ToInt64(buffer[1..]),
        256 - 4 => BitConverter.ToInt32(buffer[1..]),
        256 - 2 => BitConverter.ToInt16(buffer[1..]),
        2 => BitConverter.ToUInt16(buffer[1..]),
        4 => BitConverter.ToUInt32(buffer[1..]),
        _ => 0
    };
}



